name: Build and Push "docker-test" Images

on:
  workflow_dispatch:  # 手動のActionsトリガー
  push:
    branches:
      - main  # mainブランチにpushされたときに実行
    paths:
      - 'Dockerfile'
      - '.github/workflows/build.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: docker-test
  TEXLIVE_VER: 24
  IMAGE_VER: 1
  # ARCH: amd64,arm64

jobs:
  tag:
    name: Create Image/Release tag
    runs-on: ubuntu-latest
    # リポジトリを参照する権限を付与
    permissions:
      contents: read
    # イメージタグを後続のjobに渡すoutputs
    outputs:
      tag: ${{ steps.tag.outputs.TAG }}
      prevtag: ${{ steps.tag.outputs.PREVTAG }}
    steps:
      # GitHubリポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: -1
      # イメージタグの生成
      - name: create tag
        id: tag
        # run: |
        #   REV=0
        #   while git show-ref --tags | grep -q "refs/tags/${{ env.TEXLIVE_VER }}.${{ env.IMAGE_VER }}.${REV}"; do
        #   REV=$((REV+1))
        #   done
        #   echo "TAG=${{ env.TEXLIVE_VER }}.${{ env.IMAGE_VER }}.${REV}" >> "$GITHUB_OUTPUT"
        run: |
          patch=0
          PREVTAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          IFS='.' read -r major minor patch <<< "$PREVTAG"
          if [[ "$major" == "${{ env.TEXLIVE_VER }}" && "$minor" == "${{ env.IMAGE_VER }}" ]]; then
            patch=$((patch + 1))
          fi
          echo "PREVTAG=$PREV_TAG" >> "$GITHUB_OUTPUT"
          echo "TAG=${{ env.TEXLIVE_VER }}.${{ env.IMAGE_VER }}.${patch}" >> "$GITHUB_OUTPUT"
    
  build:
    name: Build image and Publish to GHCR
    needs: tag
    # アーキテクチャごとにジョブを分割
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
          - arch: arm64
            runner: self-hosted
    # アーキテクチャごとランナーを分ける        
    runs-on: ${{ matrix.runner }}
    # イメージをプッシュする権限を付与
    permissions:
      contents: read  # コードを読み取る権限
      packages: write  # ghcr.ioにパッケージをpushする権限
    steps:
      # GitHubリポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: -1

      # ghcr.ioにログイン
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      # QEMUのセットアップ
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/${{ matrix.arch }}
      
      # Docker Buildxのセットアップ
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # メタデータを生成（latestタグを追加）
      - name: Extract metadata for Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/hirotnk1118/${{ env.IMAGE_NAME }}
          tags: type=raw,value=${{ needs.tag.outputs.tag }}-${{ matrix.arch }}

      # Dockerイメージをビルドしてghcr.ioにプッシュ
      - name: Build and push Docker image
        # timeout-minutes: ${{ matrix.build-time }}
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          push: true
          # 対応するアーキテクチャを指定
          platforms: linux/${{ matrix.arch }}
          # イメージタグを指定
          tags: ${{ steps.meta.outputs.tags }}
          # キャッシュの利用
          # cache-from: type=gha
          cache-from: type=gha,scope=docker-test-${{ matrix.arch }}
          # cache-to: type=gha,mode=max
          cache-to: type=gha,mode=max,scope=docker-test-${{ matrix.arch }}
          provenance: false

  manifest:
    name: Publish latest image
    needs:
      - build
      - tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      # GitHubリポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: -1
      
      # ghcr.ioにログイン
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # マニフェストを生成してプッシュ
      - name: Create and push Docker manifest
        uses: Noelware/docker-manifest-action@master
        with:
          inputs: |
            ${{ env.REGISTRY }}/hirotnk1118/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/hirotnk1118/${{ env.IMAGE_NAME }}:${{ needs.tag.outputs.tag }}
          images: |
            ${{ env.REGISTRY }}/hirotnk1118/${{ env.IMAGE_NAME }}:${{ needs.tag.outputs.tag }}-amd64
            ${{ env.REGISTRY }}/hirotnk1118/${{ env.IMAGE_NAME }}:${{ needs.tag.outputs.tag }}-arm64
          push: true
          amend: true

  release:
    name: Publish release to GitHub
    needs: tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # GitHubリポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: -1

      # リリース日の取得
      - name: Set current day of month as env variable
        id: date
        env:
          TZ: 'Asia/Tokyo' # タイムゾーン指定
        run: echo "DATE=$(date +'%Y/%m/%d')" >> "$GITHUB_OUTPUT"
  
      # GitHubリポジトリにリリースを作成
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.tag.outputs.tag }}
          release_name: docker-test ${{ needs.tag.outputs.tag }} (${{ steps.date.outputs.DATE }})
          body: |
            ## Added
            ## Changed
            ## Fixed
          draft: true
      