name: Build and Push "docker-test" Images

on:
  workflow_dispatch:  # 手動のActionsトリガー
  push:
    branches:
      - main  # mainブランチにpushされたときに実行
    paths:
      - 'Dockerfile'
      - '.github/workflows/build.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: docker-test
  TEXLIVE_VER: 24
  IMAGE_VER: 0

jobs:
  build:
    name: Build image and Publish to GHCR
    runs-on: ubuntu-latest
    timeout-minutes: 720

    # イメージをプッシュする権限をGITHUB_TOKENに付与
    permissions:
      contents: read  # コードを読み取る権限
      packages: write  # ghcr.ioにパッケージをpushする権限
    
    # アーキテクチャごとにジョブを分割
    strategy:
      matrix:
        include:
          - arch: amd64
            build-time: 30
          - arch: arm64
            build-time: 480

    steps:
      # GitHubリポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: -1

      # イメージタグの生成
      - name: create image tag
        run: |
          REV=0
          while git show-ref --tags | grep -q "refs/tags/${{ env.TEXLIVE_VER }}.${{ env.IMAGE_VER }}.${REV}"; do
          REV=$((REV+1))
          done
          echo "IMAGE_TAG=${{ env.TEXLIVE_VER }}.${{ env.IMAGE_VER }}.${REV}" >> $GITHUB_ENV

      # ghcr.ioにログイン
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      # QEMUのセットアップ
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/${{ matrix.arch }}
      
      # Docker Buildxのセットアップ
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # メタデータを生成（latestタグを追加）
      - name: Extract metadata for Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/hirotnk1118/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest-${{ matrix.arch }} # mainブランチにpushされた場合にlatestタグを付与
            type=raw,value=${{ env.IMAGE_TAG }}-${{ matrix.arch }}  # ブランチベースのタグ

      # Dockerイメージをビルドしてghcr.ioにプッシュ
      - name: Build and push Docker image
        timeout-minutes: ${{ matrix.build-time }}
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          push: true
          # 対応するアーキテクチャを指定
          platforms: linux/${{ matrix.arch }}
          # イメージタグを指定
          tags: ${{ steps.meta.outputs.tags }}
          # キャッシュの利用
          cache-from: type=gha,scope=docker-test-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=docker-test-${{ matrix.arch }}
          provenance: false

  manifest:
    name: Publish latest image
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      # GitHubリポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: -1

      # イメージタグの生成
      - name: create image tag
        run: |
          REV=0
          while git show-ref --tags | grep -q "refs/tags/${{ env.TEXLIVE_VER }}.${{ env.IMAGE_VER }}.${REV}"; do
          REV=$((REV+1))
          done
          echo "IMAGE_TAG=${{ env.TEXLIVE_VER }}.${{ env.IMAGE_VER }}.${REV}" >> $GITHUB_ENV
      
      # ghcr.ioにログイン
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # マニフェストを生成してプッシュ
      - name: Create and push Docker manifest
        uses: Noelware/docker-manifest-action@master
        with:
          inputs: ${{ env.REGISTRY }}/hirotnk1118/${{ env.IMAGE_NAME }}:latest, ${{ env.REGISTRY }}/hirotnk1118/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          images: ${{ env.REGISTRY }}/hirotnk1118/${{ env.IMAGE_NAME }}:latest-amd64, ${{ env.REGISTRY }}/hirotnk1118/${{ env.IMAGE_NAME }}:latest-arm64

  release:
    name: Publish release to GitHub
    needs: manifest
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # GitHubリポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: -1

      # リリースタグの生成
      - name: create release tag
        run: |
          REV=0
          while git show-ref --tags | grep -q "refs/tags/${{ env.TEXLIVE_VER }}.${{ env.IMAGE_VER }}.${REV}"; do
          REV=$((REV+1))
          done
          echo "RELEASE_TAG=${{ env.TEXLIVE_VER }}.${{ env.IMAGE_VER }}.${REV}" >> $GITHUB_ENV

      # リリース日の取得
      - name: Set current day of month as env variable
        env:
          TZ: 'Asia/Tokyo' # タイムゾーン指定
        run: echo "DATE=$(date +'%Y/%m/%d')" >> $GITHUB_ENV
  
      # GitHubリポジトリにリリースを作成
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: docker-test ${{ env.RELEASE_TAG }} (${{ env.DATE }})
          body: |
            ## Added
            ## Changed
            ## Fixed
          draft: true
      